# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExpandedTeamResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team': 'TeamDTO',
        'administrators': 'list[UserDTO]',
        'is_admin': 'bool',
        'member_count': 'int'
    }

    attribute_map = {
        'team': 'team',
        'administrators': 'administrators',
        'is_admin': 'isAdmin',
        'member_count': 'memberCount'
    }

    def __init__(self, team=None, administrators=None, is_admin=None, member_count=None):  # noqa: E501
        """ExpandedTeamResponse - a model defined in OpenAPI"""  # noqa: E501

        self._team = None
        self._administrators = None
        self._is_admin = None
        self._member_count = None
        self.discriminator = None

        self.team = team
        self.administrators = administrators
        self.is_admin = is_admin
        self.member_count = member_count

    @property
    def team(self):
        """Gets the team of this ExpandedTeamResponse.  # noqa: E501


        :return: The team of this ExpandedTeamResponse.  # noqa: E501
        :rtype: TeamDTO
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ExpandedTeamResponse.


        :param team: The team of this ExpandedTeamResponse.  # noqa: E501
        :type: TeamDTO
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")  # noqa: E501

        self._team = team

    @property
    def administrators(self):
        """Gets the administrators of this ExpandedTeamResponse.  # noqa: E501


        :return: The administrators of this ExpandedTeamResponse.  # noqa: E501
        :rtype: list[UserDTO]
        """
        return self._administrators

    @administrators.setter
    def administrators(self, administrators):
        """Sets the administrators of this ExpandedTeamResponse.


        :param administrators: The administrators of this ExpandedTeamResponse.  # noqa: E501
        :type: list[UserDTO]
        """
        if administrators is None:
            raise ValueError("Invalid value for `administrators`, must not be `None`")  # noqa: E501

        self._administrators = administrators

    @property
    def is_admin(self):
        """Gets the is_admin of this ExpandedTeamResponse.  # noqa: E501


        :return: The is_admin of this ExpandedTeamResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ExpandedTeamResponse.


        :param is_admin: The is_admin of this ExpandedTeamResponse.  # noqa: E501
        :type: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")  # noqa: E501

        self._is_admin = is_admin

    @property
    def member_count(self):
        """Gets the member_count of this ExpandedTeamResponse.  # noqa: E501


        :return: The member_count of this ExpandedTeamResponse.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this ExpandedTeamResponse.


        :param member_count: The member_count of this ExpandedTeamResponse.  # noqa: E501
        :type: int
        """
        if member_count is None:
            raise ValueError("Invalid value for `member_count`, must not be `None`")  # noqa: E501

        self._member_count = member_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpandedTeamResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
