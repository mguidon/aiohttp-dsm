# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateAnnotationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'layer_id': 'int',
        'path': 'list[PathElement]',
        'description': 'str',
        'properties': 'list[GraphNodePropertyRO]',
        'annotated_item': 'str'
    }

    attribute_map = {
        'layer_id': 'layerId',
        'path': 'path',
        'description': 'description',
        'properties': 'properties',
        'annotated_item': 'annotatedItem'
    }

    def __init__(self, layer_id=None, path=None, description=None, properties=None, annotated_item=None):  # noqa: E501
        """CreateAnnotationRequest - a model defined in OpenAPI"""  # noqa: E501

        self._layer_id = None
        self._path = None
        self._description = None
        self._properties = None
        self._annotated_item = None
        self.discriminator = None

        if layer_id is not None:
            self.layer_id = layer_id
        if path is not None:
            self.path = path
        self.description = description
        self.properties = properties
        self.annotated_item = annotated_item

    @property
    def layer_id(self):
        """Gets the layer_id of this CreateAnnotationRequest.  # noqa: E501


        :return: The layer_id of this CreateAnnotationRequest.  # noqa: E501
        :rtype: int
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this CreateAnnotationRequest.


        :param layer_id: The layer_id of this CreateAnnotationRequest.  # noqa: E501
        :type: int
        """

        self._layer_id = layer_id

    @property
    def path(self):
        """Gets the path of this CreateAnnotationRequest.  # noqa: E501


        :return: The path of this CreateAnnotationRequest.  # noqa: E501
        :rtype: list[PathElement]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CreateAnnotationRequest.


        :param path: The path of this CreateAnnotationRequest.  # noqa: E501
        :type: list[PathElement]
        """

        self._path = path

    @property
    def description(self):
        """Gets the description of this CreateAnnotationRequest.  # noqa: E501


        :return: The description of this CreateAnnotationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnnotationRequest.


        :param description: The description of this CreateAnnotationRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this CreateAnnotationRequest.  # noqa: E501


        :return: The properties of this CreateAnnotationRequest.  # noqa: E501
        :rtype: list[GraphNodePropertyRO]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateAnnotationRequest.


        :param properties: The properties of this CreateAnnotationRequest.  # noqa: E501
        :type: list[GraphNodePropertyRO]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def annotated_item(self):
        """Gets the annotated_item of this CreateAnnotationRequest.  # noqa: E501


        :return: The annotated_item of this CreateAnnotationRequest.  # noqa: E501
        :rtype: str
        """
        return self._annotated_item

    @annotated_item.setter
    def annotated_item(self, annotated_item):
        """Sets the annotated_item of this CreateAnnotationRequest.


        :param annotated_item: The annotated_item of this CreateAnnotationRequest.  # noqa: E501
        :type: str
        """
        if annotated_item is None:
            raise ValueError("Invalid value for `annotated_item`, must not be `None`")  # noqa: E501

        self._annotated_item = annotated_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAnnotationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
