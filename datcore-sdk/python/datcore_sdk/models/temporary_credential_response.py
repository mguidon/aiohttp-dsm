# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemporaryCredentialResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key': 'str',
        'region': 'str',
        'secret_key': 'str',
        'expiration': 'str',
        'session_token': 'str'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'region': 'region',
        'secret_key': 'secretKey',
        'expiration': 'expiration',
        'session_token': 'sessionToken'
    }

    def __init__(self, access_key=None, region=None, secret_key=None, expiration=None, session_token=None):  # noqa: E501
        """TemporaryCredentialResponse - a model defined in OpenAPI"""  # noqa: E501

        self._access_key = None
        self._region = None
        self._secret_key = None
        self._expiration = None
        self._session_token = None
        self.discriminator = None

        self.access_key = access_key
        self.region = region
        self.secret_key = secret_key
        self.expiration = expiration
        self.session_token = session_token

    @property
    def access_key(self):
        """Gets the access_key of this TemporaryCredentialResponse.  # noqa: E501


        :return: The access_key of this TemporaryCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this TemporaryCredentialResponse.


        :param access_key: The access_key of this TemporaryCredentialResponse.  # noqa: E501
        :type: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def region(self):
        """Gets the region of this TemporaryCredentialResponse.  # noqa: E501


        :return: The region of this TemporaryCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TemporaryCredentialResponse.


        :param region: The region of this TemporaryCredentialResponse.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this TemporaryCredentialResponse.  # noqa: E501


        :return: The secret_key of this TemporaryCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this TemporaryCredentialResponse.


        :param secret_key: The secret_key of this TemporaryCredentialResponse.  # noqa: E501
        :type: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    @property
    def expiration(self):
        """Gets the expiration of this TemporaryCredentialResponse.  # noqa: E501


        :return: The expiration of this TemporaryCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this TemporaryCredentialResponse.


        :param expiration: The expiration of this TemporaryCredentialResponse.  # noqa: E501
        :type: str
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def session_token(self):
        """Gets the session_token of this TemporaryCredentialResponse.  # noqa: E501


        :return: The session_token of this TemporaryCredentialResponse.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this TemporaryCredentialResponse.


        :param session_token: The session_token of this TemporaryCredentialResponse.  # noqa: E501
        :type: str
        """
        if session_token is None:
            raise ValueError("Invalid value for `session_token`, must not be `None`")  # noqa: E501

        self._session_token = session_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemporaryCredentialResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
