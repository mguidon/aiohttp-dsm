# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DiscussionsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comments': 'dict(str, list[CommentDTO])',
        'discussions': 'list[DiscussionDTO]',
        'user_map': 'dict(str, UserDTO)'
    }

    attribute_map = {
        'comments': 'comments',
        'discussions': 'discussions',
        'user_map': 'userMap'
    }

    def __init__(self, comments=None, discussions=None, user_map=None):  # noqa: E501
        """DiscussionsResponse - a model defined in OpenAPI"""  # noqa: E501

        self._comments = None
        self._discussions = None
        self._user_map = None
        self.discriminator = None

        self.comments = comments
        self.discussions = discussions
        if user_map is not None:
            self.user_map = user_map

    @property
    def comments(self):
        """Gets the comments of this DiscussionsResponse.  # noqa: E501


        :return: The comments of this DiscussionsResponse.  # noqa: E501
        :rtype: dict(str, list[CommentDTO])
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DiscussionsResponse.


        :param comments: The comments of this DiscussionsResponse.  # noqa: E501
        :type: dict(str, list[CommentDTO])
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")  # noqa: E501

        self._comments = comments

    @property
    def discussions(self):
        """Gets the discussions of this DiscussionsResponse.  # noqa: E501


        :return: The discussions of this DiscussionsResponse.  # noqa: E501
        :rtype: list[DiscussionDTO]
        """
        return self._discussions

    @discussions.setter
    def discussions(self, discussions):
        """Sets the discussions of this DiscussionsResponse.


        :param discussions: The discussions of this DiscussionsResponse.  # noqa: E501
        :type: list[DiscussionDTO]
        """
        if discussions is None:
            raise ValueError("Invalid value for `discussions`, must not be `None`")  # noqa: E501

        self._discussions = discussions

    @property
    def user_map(self):
        """Gets the user_map of this DiscussionsResponse.  # noqa: E501


        :return: The user_map of this DiscussionsResponse.  # noqa: E501
        :rtype: dict(str, UserDTO)
        """
        return self._user_map

    @user_map.setter
    def user_map(self, user_map):
        """Sets the user_map of this DiscussionsResponse.


        :param user_map: The user_map of this DiscussionsResponse.  # noqa: E501
        :type: dict(str, UserDTO)
        """

        self._user_map = user_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscussionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
