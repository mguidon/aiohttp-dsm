# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PackageDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channels': 'list[ChannelDTO]',
        'parent': 'PackageDTO',
        'children': 'list[PackageDTO]',
        'ancestors': 'list[PackageDTO]',
        'properties': 'list[GraphNodePropertiesDTO]',
        'content': 'WrappedPackage',
        'storage': 'int',
        'objects': 'dict(str, list[FileDTO])'
    }

    attribute_map = {
        'channels': 'channels',
        'parent': 'parent',
        'children': 'children',
        'ancestors': 'ancestors',
        'properties': 'properties',
        'content': 'content',
        'storage': 'storage',
        'objects': 'objects'
    }

    def __init__(self, channels=None, parent=None, children=None, ancestors=None, properties=None, content=None, storage=None, objects=None):  # noqa: E501
        """PackageDTO - a model defined in OpenAPI"""  # noqa: E501

        self._channels = None
        self._parent = None
        self._children = None
        self._ancestors = None
        self._properties = None
        self._content = None
        self._storage = None
        self._objects = None
        self.discriminator = None

        if channels is not None:
            self.channels = channels
        if parent is not None:
            self.parent = parent
        self.children = children
        if ancestors is not None:
            self.ancestors = ancestors
        self.properties = properties
        self.content = content
        if storage is not None:
            self.storage = storage
        if objects is not None:
            self.objects = objects

    @property
    def channels(self):
        """Gets the channels of this PackageDTO.  # noqa: E501


        :return: The channels of this PackageDTO.  # noqa: E501
        :rtype: list[ChannelDTO]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this PackageDTO.


        :param channels: The channels of this PackageDTO.  # noqa: E501
        :type: list[ChannelDTO]
        """

        self._channels = channels

    @property
    def parent(self):
        """Gets the parent of this PackageDTO.  # noqa: E501


        :return: The parent of this PackageDTO.  # noqa: E501
        :rtype: PackageDTO
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this PackageDTO.


        :param parent: The parent of this PackageDTO.  # noqa: E501
        :type: PackageDTO
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this PackageDTO.  # noqa: E501


        :return: The children of this PackageDTO.  # noqa: E501
        :rtype: list[PackageDTO]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this PackageDTO.


        :param children: The children of this PackageDTO.  # noqa: E501
        :type: list[PackageDTO]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def ancestors(self):
        """Gets the ancestors of this PackageDTO.  # noqa: E501


        :return: The ancestors of this PackageDTO.  # noqa: E501
        :rtype: list[PackageDTO]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this PackageDTO.


        :param ancestors: The ancestors of this PackageDTO.  # noqa: E501
        :type: list[PackageDTO]
        """

        self._ancestors = ancestors

    @property
    def properties(self):
        """Gets the properties of this PackageDTO.  # noqa: E501


        :return: The properties of this PackageDTO.  # noqa: E501
        :rtype: list[GraphNodePropertiesDTO]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PackageDTO.


        :param properties: The properties of this PackageDTO.  # noqa: E501
        :type: list[GraphNodePropertiesDTO]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def content(self):
        """Gets the content of this PackageDTO.  # noqa: E501


        :return: The content of this PackageDTO.  # noqa: E501
        :rtype: WrappedPackage
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PackageDTO.


        :param content: The content of this PackageDTO.  # noqa: E501
        :type: WrappedPackage
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def storage(self):
        """Gets the storage of this PackageDTO.  # noqa: E501


        :return: The storage of this PackageDTO.  # noqa: E501
        :rtype: int
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this PackageDTO.


        :param storage: The storage of this PackageDTO.  # noqa: E501
        :type: int
        """

        self._storage = storage

    @property
    def objects(self):
        """Gets the objects of this PackageDTO.  # noqa: E501


        :return: The objects of this PackageDTO.  # noqa: E501
        :rtype: dict(str, list[FileDTO])
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this PackageDTO.


        :param objects: The objects of this PackageDTO.  # noqa: E501
        :type: dict(str, list[FileDTO])
        """

        self._objects = objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
