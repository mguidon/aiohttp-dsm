# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ZonedDateTime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_time': 'datetime',
        'offset': 'ZoneOffset',
        'zone': 'ZoneId'
    }

    attribute_map = {
        'date_time': 'dateTime',
        'offset': 'offset',
        'zone': 'zone'
    }

    def __init__(self, date_time=None, offset=None, zone=None):  # noqa: E501
        """ZonedDateTime - a model defined in OpenAPI"""  # noqa: E501

        self._date_time = None
        self._offset = None
        self._zone = None
        self.discriminator = None

        self.date_time = date_time
        self.offset = offset
        self.zone = zone

    @property
    def date_time(self):
        """Gets the date_time of this ZonedDateTime.  # noqa: E501


        :return: The date_time of this ZonedDateTime.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this ZonedDateTime.


        :param date_time: The date_time of this ZonedDateTime.  # noqa: E501
        :type: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def offset(self):
        """Gets the offset of this ZonedDateTime.  # noqa: E501


        :return: The offset of this ZonedDateTime.  # noqa: E501
        :rtype: ZoneOffset
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ZonedDateTime.


        :param offset: The offset of this ZonedDateTime.  # noqa: E501
        :type: ZoneOffset
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def zone(self):
        """Gets the zone of this ZonedDateTime.  # noqa: E501


        :return: The zone of this ZonedDateTime.  # noqa: E501
        :rtype: ZoneId
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ZonedDateTime.


        :param zone: The zone of this ZonedDateTime.  # noqa: E501
        :type: ZoneId
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZonedDateTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
