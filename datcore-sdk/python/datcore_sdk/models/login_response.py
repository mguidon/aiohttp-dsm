# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LoginResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_token': 'str',
        'organization': 'str',
        'profile': 'UserDTO',
        'message': 'str'
    }

    attribute_map = {
        'session_token': 'sessionToken',
        'organization': 'organization',
        'profile': 'profile',
        'message': 'message'
    }

    def __init__(self, session_token=None, organization=None, profile=None, message=None):  # noqa: E501
        """LoginResponse - a model defined in OpenAPI"""  # noqa: E501

        self._session_token = None
        self._organization = None
        self._profile = None
        self._message = None
        self.discriminator = None

        if session_token is not None:
            self.session_token = session_token
        if organization is not None:
            self.organization = organization
        if profile is not None:
            self.profile = profile
        self.message = message

    @property
    def session_token(self):
        """Gets the session_token of this LoginResponse.  # noqa: E501


        :return: The session_token of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this LoginResponse.


        :param session_token: The session_token of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._session_token = session_token

    @property
    def organization(self):
        """Gets the organization of this LoginResponse.  # noqa: E501


        :return: The organization of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LoginResponse.


        :param organization: The organization of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def profile(self):
        """Gets the profile of this LoginResponse.  # noqa: E501


        :return: The profile of this LoginResponse.  # noqa: E501
        :rtype: UserDTO
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this LoginResponse.


        :param profile: The profile of this LoginResponse.  # noqa: E501
        :type: UserDTO
        """

        self._profile = profile

    @property
    def message(self):
        """Gets the message of this LoginResponse.  # noqa: E501


        :return: The message of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LoginResponse.


        :param message: The message of this LoginResponse.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
