# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UUID(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'most_sig_bits': 'int',
        'least_sig_bits': 'int'
    }

    attribute_map = {
        'most_sig_bits': 'mostSigBits',
        'least_sig_bits': 'leastSigBits'
    }

    def __init__(self, most_sig_bits=None, least_sig_bits=None):  # noqa: E501
        """UUID - a model defined in OpenAPI"""  # noqa: E501

        self._most_sig_bits = None
        self._least_sig_bits = None
        self.discriminator = None

        self.most_sig_bits = most_sig_bits
        self.least_sig_bits = least_sig_bits

    @property
    def most_sig_bits(self):
        """Gets the most_sig_bits of this UUID.  # noqa: E501


        :return: The most_sig_bits of this UUID.  # noqa: E501
        :rtype: int
        """
        return self._most_sig_bits

    @most_sig_bits.setter
    def most_sig_bits(self, most_sig_bits):
        """Sets the most_sig_bits of this UUID.


        :param most_sig_bits: The most_sig_bits of this UUID.  # noqa: E501
        :type: int
        """
        if most_sig_bits is None:
            raise ValueError("Invalid value for `most_sig_bits`, must not be `None`")  # noqa: E501

        self._most_sig_bits = most_sig_bits

    @property
    def least_sig_bits(self):
        """Gets the least_sig_bits of this UUID.  # noqa: E501


        :return: The least_sig_bits of this UUID.  # noqa: E501
        :rtype: int
        """
        return self._least_sig_bits

    @least_sig_bits.setter
    def least_sig_bits(self, least_sig_bits):
        """Sets the least_sig_bits of this UUID.


        :param least_sig_bits: The least_sig_bits of this UUID.  # noqa: E501
        :type: int
        """
        if least_sig_bits is None:
            raise ValueError("Invalid value for `least_sig_bits`, must not be `None`")  # noqa: E501

        self._least_sig_bits = least_sig_bits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UUID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
