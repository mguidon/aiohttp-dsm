# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TimeSeriesAnnotationWriteRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'data': 'AnnotationData',
        'label': 'str',
        'channel_ids': 'list[str]',
        'linked_package': 'str',
        'end': 'int',
        'start': 'int',
        'layer_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'data': 'data',
        'label': 'label',
        'channel_ids': 'channelIds',
        'linked_package': 'linkedPackage',
        'end': 'end',
        'start': 'start',
        'layer_id': 'layer_id'
    }

    def __init__(self, name=None, description=None, data=None, label=None, channel_ids=None, linked_package=None, end=None, start=None, layer_id=None):  # noqa: E501
        """TimeSeriesAnnotationWriteRequest - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._description = None
        self._data = None
        self._label = None
        self._channel_ids = None
        self._linked_package = None
        self._end = None
        self._start = None
        self._layer_id = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if data is not None:
            self.data = data
        self.label = label
        self.channel_ids = channel_ids
        if linked_package is not None:
            self.linked_package = linked_package
        self.end = end
        self.start = start
        if layer_id is not None:
            self.layer_id = layer_id

    @property
    def name(self):
        """Gets the name of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The name of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeSeriesAnnotationWriteRequest.


        :param name: The name of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The description of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeSeriesAnnotationWriteRequest.


        :param description: The description of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def data(self):
        """Gets the data of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The data of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: AnnotationData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimeSeriesAnnotationWriteRequest.


        :param data: The data of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: AnnotationData
        """

        self._data = data

    @property
    def label(self):
        """Gets the label of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The label of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TimeSeriesAnnotationWriteRequest.


        :param label: The label of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def channel_ids(self):
        """Gets the channel_ids of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The channel_ids of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this TimeSeriesAnnotationWriteRequest.


        :param channel_ids: The channel_ids of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: list[str]
        """
        if channel_ids is None:
            raise ValueError("Invalid value for `channel_ids`, must not be `None`")  # noqa: E501

        self._channel_ids = channel_ids

    @property
    def linked_package(self):
        """Gets the linked_package of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The linked_package of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._linked_package

    @linked_package.setter
    def linked_package(self, linked_package):
        """Sets the linked_package of this TimeSeriesAnnotationWriteRequest.


        :param linked_package: The linked_package of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: str
        """

        self._linked_package = linked_package

    @property
    def end(self):
        """Gets the end of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The end of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TimeSeriesAnnotationWriteRequest.


        :param end: The end of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: int
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def start(self):
        """Gets the start of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The start of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeSeriesAnnotationWriteRequest.


        :param start: The start of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def layer_id(self):
        """Gets the layer_id of this TimeSeriesAnnotationWriteRequest.  # noqa: E501


        :return: The layer_id of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :rtype: int
        """
        return self._layer_id

    @layer_id.setter
    def layer_id(self, layer_id):
        """Sets the layer_id of this TimeSeriesAnnotationWriteRequest.


        :param layer_id: The layer_id of this TimeSeriesAnnotationWriteRequest.  # noqa: E501
        :type: int
        """

        self._layer_id = layer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesAnnotationWriteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
