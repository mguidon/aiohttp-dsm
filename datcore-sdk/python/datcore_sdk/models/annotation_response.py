# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnnotationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotation': 'AnnotationDTO',
        'user_map': 'dict(str, UserDTO)',
        'layer': 'AnnotationLayer'
    }

    attribute_map = {
        'annotation': 'annotation',
        'user_map': 'userMap',
        'layer': 'layer'
    }

    def __init__(self, annotation=None, user_map=None, layer=None):  # noqa: E501
        """AnnotationResponse - a model defined in OpenAPI"""  # noqa: E501

        self._annotation = None
        self._user_map = None
        self._layer = None
        self.discriminator = None

        self.annotation = annotation
        if user_map is not None:
            self.user_map = user_map
        if layer is not None:
            self.layer = layer

    @property
    def annotation(self):
        """Gets the annotation of this AnnotationResponse.  # noqa: E501


        :return: The annotation of this AnnotationResponse.  # noqa: E501
        :rtype: AnnotationDTO
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this AnnotationResponse.


        :param annotation: The annotation of this AnnotationResponse.  # noqa: E501
        :type: AnnotationDTO
        """
        if annotation is None:
            raise ValueError("Invalid value for `annotation`, must not be `None`")  # noqa: E501

        self._annotation = annotation

    @property
    def user_map(self):
        """Gets the user_map of this AnnotationResponse.  # noqa: E501


        :return: The user_map of this AnnotationResponse.  # noqa: E501
        :rtype: dict(str, UserDTO)
        """
        return self._user_map

    @user_map.setter
    def user_map(self, user_map):
        """Sets the user_map of this AnnotationResponse.


        :param user_map: The user_map of this AnnotationResponse.  # noqa: E501
        :type: dict(str, UserDTO)
        """

        self._user_map = user_map

    @property
    def layer(self):
        """Gets the layer of this AnnotationResponse.  # noqa: E501


        :return: The layer of this AnnotationResponse.  # noqa: E501
        :rtype: AnnotationLayer
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this AnnotationResponse.


        :param layer: The layer of this AnnotationResponse.  # noqa: E501
        :type: AnnotationLayer
        """

        self._layer = layer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
