# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateCommentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'discussion_id': 'int',
        'mentions': 'list[str]',
        'message': 'str',
        'package_id': 'str',
        'annotation_id': 'int',
        'time_series_annotation_id': 'int'
    }

    attribute_map = {
        'discussion_id': 'discussionId',
        'mentions': 'mentions',
        'message': 'message',
        'package_id': 'packageId',
        'annotation_id': 'annotationId',
        'time_series_annotation_id': 'timeSeriesAnnotationId'
    }

    def __init__(self, discussion_id=None, mentions=None, message=None, package_id=None, annotation_id=None, time_series_annotation_id=None):  # noqa: E501
        """CreateCommentRequest - a model defined in OpenAPI"""  # noqa: E501

        self._discussion_id = None
        self._mentions = None
        self._message = None
        self._package_id = None
        self._annotation_id = None
        self._time_series_annotation_id = None
        self.discriminator = None

        if discussion_id is not None:
            self.discussion_id = discussion_id
        if mentions is not None:
            self.mentions = mentions
        self.message = message
        self.package_id = package_id
        if annotation_id is not None:
            self.annotation_id = annotation_id
        if time_series_annotation_id is not None:
            self.time_series_annotation_id = time_series_annotation_id

    @property
    def discussion_id(self):
        """Gets the discussion_id of this CreateCommentRequest.  # noqa: E501


        :return: The discussion_id of this CreateCommentRequest.  # noqa: E501
        :rtype: int
        """
        return self._discussion_id

    @discussion_id.setter
    def discussion_id(self, discussion_id):
        """Sets the discussion_id of this CreateCommentRequest.


        :param discussion_id: The discussion_id of this CreateCommentRequest.  # noqa: E501
        :type: int
        """

        self._discussion_id = discussion_id

    @property
    def mentions(self):
        """Gets the mentions of this CreateCommentRequest.  # noqa: E501


        :return: The mentions of this CreateCommentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this CreateCommentRequest.


        :param mentions: The mentions of this CreateCommentRequest.  # noqa: E501
        :type: list[str]
        """

        self._mentions = mentions

    @property
    def message(self):
        """Gets the message of this CreateCommentRequest.  # noqa: E501


        :return: The message of this CreateCommentRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateCommentRequest.


        :param message: The message of this CreateCommentRequest.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def package_id(self):
        """Gets the package_id of this CreateCommentRequest.  # noqa: E501


        :return: The package_id of this CreateCommentRequest.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this CreateCommentRequest.


        :param package_id: The package_id of this CreateCommentRequest.  # noqa: E501
        :type: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")  # noqa: E501

        self._package_id = package_id

    @property
    def annotation_id(self):
        """Gets the annotation_id of this CreateCommentRequest.  # noqa: E501


        :return: The annotation_id of this CreateCommentRequest.  # noqa: E501
        :rtype: int
        """
        return self._annotation_id

    @annotation_id.setter
    def annotation_id(self, annotation_id):
        """Sets the annotation_id of this CreateCommentRequest.


        :param annotation_id: The annotation_id of this CreateCommentRequest.  # noqa: E501
        :type: int
        """

        self._annotation_id = annotation_id

    @property
    def time_series_annotation_id(self):
        """Gets the time_series_annotation_id of this CreateCommentRequest.  # noqa: E501


        :return: The time_series_annotation_id of this CreateCommentRequest.  # noqa: E501
        :rtype: int
        """
        return self._time_series_annotation_id

    @time_series_annotation_id.setter
    def time_series_annotation_id(self, time_series_annotation_id):
        """Sets the time_series_annotation_id of this CreateCommentRequest.


        :param time_series_annotation_id: The time_series_annotation_id of this CreateCommentRequest.  # noqa: E501
        :type: int
        """

        self._time_series_annotation_id = time_series_annotation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCommentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
