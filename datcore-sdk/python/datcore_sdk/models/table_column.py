# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TableColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'name': 'str',
        'internal': 'bool',
        'primary_key': 'bool',
        'datatype': 'SchemaColumnType'
    }

    attribute_map = {
        'display_name': 'displayName',
        'name': 'name',
        'internal': 'internal',
        'primary_key': 'primaryKey',
        'datatype': 'datatype'
    }

    def __init__(self, display_name=None, name=None, internal=None, primary_key=None, datatype=None):  # noqa: E501
        """TableColumn - a model defined in OpenAPI"""  # noqa: E501

        self._display_name = None
        self._name = None
        self._internal = None
        self._primary_key = None
        self._datatype = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        self.name = name
        self.internal = internal
        self.primary_key = primary_key
        self.datatype = datatype

    @property
    def display_name(self):
        """Gets the display_name of this TableColumn.  # noqa: E501


        :return: The display_name of this TableColumn.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TableColumn.


        :param display_name: The display_name of this TableColumn.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this TableColumn.  # noqa: E501


        :return: The name of this TableColumn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableColumn.


        :param name: The name of this TableColumn.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def internal(self):
        """Gets the internal of this TableColumn.  # noqa: E501


        :return: The internal of this TableColumn.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this TableColumn.


        :param internal: The internal of this TableColumn.  # noqa: E501
        :type: bool
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def primary_key(self):
        """Gets the primary_key of this TableColumn.  # noqa: E501


        :return: The primary_key of this TableColumn.  # noqa: E501
        :rtype: bool
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this TableColumn.


        :param primary_key: The primary_key of this TableColumn.  # noqa: E501
        :type: bool
        """
        if primary_key is None:
            raise ValueError("Invalid value for `primary_key`, must not be `None`")  # noqa: E501

        self._primary_key = primary_key

    @property
    def datatype(self):
        """Gets the datatype of this TableColumn.  # noqa: E501


        :return: The datatype of this TableColumn.  # noqa: E501
        :rtype: SchemaColumnType
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this TableColumn.


        :param datatype: The datatype of this TableColumn.  # noqa: E501
        :type: SchemaColumnType
        """
        if datatype is None:
            raise ValueError("Invalid value for `datatype`, must not be `None`")  # noqa: E501

        self._datatype = datatype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
