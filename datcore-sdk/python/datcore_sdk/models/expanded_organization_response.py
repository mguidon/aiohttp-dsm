# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExpandedOrganizationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organization': 'OrganizationDTO',
        'is_admin': 'bool',
        'owners': 'list[UserDTO]',
        'administrators': 'list[UserDTO]',
        'is_owner': 'bool'
    }

    attribute_map = {
        'organization': 'organization',
        'is_admin': 'isAdmin',
        'owners': 'owners',
        'administrators': 'administrators',
        'is_owner': 'isOwner'
    }

    def __init__(self, organization=None, is_admin=None, owners=None, administrators=None, is_owner=None):  # noqa: E501
        """ExpandedOrganizationResponse - a model defined in OpenAPI"""  # noqa: E501

        self._organization = None
        self._is_admin = None
        self._owners = None
        self._administrators = None
        self._is_owner = None
        self.discriminator = None

        self.organization = organization
        self.is_admin = is_admin
        self.owners = owners
        self.administrators = administrators
        self.is_owner = is_owner

    @property
    def organization(self):
        """Gets the organization of this ExpandedOrganizationResponse.  # noqa: E501


        :return: The organization of this ExpandedOrganizationResponse.  # noqa: E501
        :rtype: OrganizationDTO
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ExpandedOrganizationResponse.


        :param organization: The organization of this ExpandedOrganizationResponse.  # noqa: E501
        :type: OrganizationDTO
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def is_admin(self):
        """Gets the is_admin of this ExpandedOrganizationResponse.  # noqa: E501


        :return: The is_admin of this ExpandedOrganizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ExpandedOrganizationResponse.


        :param is_admin: The is_admin of this ExpandedOrganizationResponse.  # noqa: E501
        :type: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")  # noqa: E501

        self._is_admin = is_admin

    @property
    def owners(self):
        """Gets the owners of this ExpandedOrganizationResponse.  # noqa: E501


        :return: The owners of this ExpandedOrganizationResponse.  # noqa: E501
        :rtype: list[UserDTO]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ExpandedOrganizationResponse.


        :param owners: The owners of this ExpandedOrganizationResponse.  # noqa: E501
        :type: list[UserDTO]
        """
        if owners is None:
            raise ValueError("Invalid value for `owners`, must not be `None`")  # noqa: E501

        self._owners = owners

    @property
    def administrators(self):
        """Gets the administrators of this ExpandedOrganizationResponse.  # noqa: E501


        :return: The administrators of this ExpandedOrganizationResponse.  # noqa: E501
        :rtype: list[UserDTO]
        """
        return self._administrators

    @administrators.setter
    def administrators(self, administrators):
        """Sets the administrators of this ExpandedOrganizationResponse.


        :param administrators: The administrators of this ExpandedOrganizationResponse.  # noqa: E501
        :type: list[UserDTO]
        """
        if administrators is None:
            raise ValueError("Invalid value for `administrators`, must not be `None`")  # noqa: E501

        self._administrators = administrators

    @property
    def is_owner(self):
        """Gets the is_owner of this ExpandedOrganizationResponse.  # noqa: E501


        :return: The is_owner of this ExpandedOrganizationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this ExpandedOrganizationResponse.


        :param is_owner: The is_owner of this ExpandedOrganizationResponse.  # noqa: E501
        :type: bool
        """
        if is_owner is None:
            raise ValueError("Invalid value for `is_owner`, must not be `None`")  # noqa: E501

        self._is_owner = is_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpandedOrganizationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
