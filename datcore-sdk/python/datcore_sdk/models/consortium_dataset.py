# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConsortiumDataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'size': 'int',
        'description': 'str',
        'last_published': 'datetime',
        's3bucket': 'str',
        'consortium_id': 'int',
        's3path': 'str',
        'version': 'int',
        'id': 'int',
        'file_count': 'dict(str, int)',
        'status': 'PublishStatus',
        'created_at': 'datetime',
        'record_count': 'int',
        'organization_id': 'int',
        'published_dataset_id': 'int',
        'user_id': 'int',
        'model_count': 'dict(str, int)',
        'source_dataset_id': 'int'
    }

    attribute_map = {
        'size': 'size',
        'description': 'description',
        'last_published': 'lastPublished',
        's3bucket': 's3bucket',
        'consortium_id': 'consortiumId',
        's3path': 's3path',
        'version': 'version',
        'id': 'id',
        'file_count': 'fileCount',
        'status': 'status',
        'created_at': 'createdAt',
        'record_count': 'recordCount',
        'organization_id': 'organizationId',
        'published_dataset_id': 'publishedDatasetId',
        'user_id': 'userId',
        'model_count': 'modelCount',
        'source_dataset_id': 'sourceDatasetId'
    }

    def __init__(self, size=None, description=None, last_published=None, s3bucket=None, consortium_id=None, s3path=None, version=None, id=None, file_count=None, status=None, created_at=None, record_count=None, organization_id=None, published_dataset_id=None, user_id=None, model_count=None, source_dataset_id=None):  # noqa: E501
        """ConsortiumDataset - a model defined in OpenAPI"""  # noqa: E501

        self._size = None
        self._description = None
        self._last_published = None
        self._s3bucket = None
        self._consortium_id = None
        self._s3path = None
        self._version = None
        self._id = None
        self._file_count = None
        self._status = None
        self._created_at = None
        self._record_count = None
        self._organization_id = None
        self._published_dataset_id = None
        self._user_id = None
        self._model_count = None
        self._source_dataset_id = None
        self.discriminator = None

        self.size = size
        self.description = description
        self.last_published = last_published
        self.s3bucket = s3bucket
        self.consortium_id = consortium_id
        self.s3path = s3path
        self.version = version
        self.id = id
        self.file_count = file_count
        self.status = status
        self.created_at = created_at
        self.record_count = record_count
        self.organization_id = organization_id
        if published_dataset_id is not None:
            self.published_dataset_id = published_dataset_id
        self.user_id = user_id
        self.model_count = model_count
        self.source_dataset_id = source_dataset_id

    @property
    def size(self):
        """Gets the size of this ConsortiumDataset.  # noqa: E501


        :return: The size of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ConsortiumDataset.


        :param size: The size of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def description(self):
        """Gets the description of this ConsortiumDataset.  # noqa: E501


        :return: The description of this ConsortiumDataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConsortiumDataset.


        :param description: The description of this ConsortiumDataset.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def last_published(self):
        """Gets the last_published of this ConsortiumDataset.  # noqa: E501


        :return: The last_published of this ConsortiumDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._last_published

    @last_published.setter
    def last_published(self, last_published):
        """Sets the last_published of this ConsortiumDataset.


        :param last_published: The last_published of this ConsortiumDataset.  # noqa: E501
        :type: datetime
        """
        if last_published is None:
            raise ValueError("Invalid value for `last_published`, must not be `None`")  # noqa: E501

        self._last_published = last_published

    @property
    def s3bucket(self):
        """Gets the s3bucket of this ConsortiumDataset.  # noqa: E501


        :return: The s3bucket of this ConsortiumDataset.  # noqa: E501
        :rtype: str
        """
        return self._s3bucket

    @s3bucket.setter
    def s3bucket(self, s3bucket):
        """Sets the s3bucket of this ConsortiumDataset.


        :param s3bucket: The s3bucket of this ConsortiumDataset.  # noqa: E501
        :type: str
        """
        if s3bucket is None:
            raise ValueError("Invalid value for `s3bucket`, must not be `None`")  # noqa: E501

        self._s3bucket = s3bucket

    @property
    def consortium_id(self):
        """Gets the consortium_id of this ConsortiumDataset.  # noqa: E501


        :return: The consortium_id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._consortium_id

    @consortium_id.setter
    def consortium_id(self, consortium_id):
        """Sets the consortium_id of this ConsortiumDataset.


        :param consortium_id: The consortium_id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if consortium_id is None:
            raise ValueError("Invalid value for `consortium_id`, must not be `None`")  # noqa: E501

        self._consortium_id = consortium_id

    @property
    def s3path(self):
        """Gets the s3path of this ConsortiumDataset.  # noqa: E501


        :return: The s3path of this ConsortiumDataset.  # noqa: E501
        :rtype: str
        """
        return self._s3path

    @s3path.setter
    def s3path(self, s3path):
        """Sets the s3path of this ConsortiumDataset.


        :param s3path: The s3path of this ConsortiumDataset.  # noqa: E501
        :type: str
        """
        if s3path is None:
            raise ValueError("Invalid value for `s3path`, must not be `None`")  # noqa: E501

        self._s3path = s3path

    @property
    def version(self):
        """Gets the version of this ConsortiumDataset.  # noqa: E501


        :return: The version of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConsortiumDataset.


        :param version: The version of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def id(self):
        """Gets the id of this ConsortiumDataset.  # noqa: E501


        :return: The id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConsortiumDataset.


        :param id: The id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def file_count(self):
        """Gets the file_count of this ConsortiumDataset.  # noqa: E501


        :return: The file_count of this ConsortiumDataset.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this ConsortiumDataset.


        :param file_count: The file_count of this ConsortiumDataset.  # noqa: E501
        :type: dict(str, int)
        """
        if file_count is None:
            raise ValueError("Invalid value for `file_count`, must not be `None`")  # noqa: E501

        self._file_count = file_count

    @property
    def status(self):
        """Gets the status of this ConsortiumDataset.  # noqa: E501


        :return: The status of this ConsortiumDataset.  # noqa: E501
        :rtype: PublishStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConsortiumDataset.


        :param status: The status of this ConsortiumDataset.  # noqa: E501
        :type: PublishStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this ConsortiumDataset.  # noqa: E501


        :return: The created_at of this ConsortiumDataset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConsortiumDataset.


        :param created_at: The created_at of this ConsortiumDataset.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def record_count(self):
        """Gets the record_count of this ConsortiumDataset.  # noqa: E501


        :return: The record_count of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this ConsortiumDataset.


        :param record_count: The record_count of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if record_count is None:
            raise ValueError("Invalid value for `record_count`, must not be `None`")  # noqa: E501

        self._record_count = record_count

    @property
    def organization_id(self):
        """Gets the organization_id of this ConsortiumDataset.  # noqa: E501


        :return: The organization_id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ConsortiumDataset.


        :param organization_id: The organization_id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def published_dataset_id(self):
        """Gets the published_dataset_id of this ConsortiumDataset.  # noqa: E501


        :return: The published_dataset_id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._published_dataset_id

    @published_dataset_id.setter
    def published_dataset_id(self, published_dataset_id):
        """Sets the published_dataset_id of this ConsortiumDataset.


        :param published_dataset_id: The published_dataset_id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """

        self._published_dataset_id = published_dataset_id

    @property
    def user_id(self):
        """Gets the user_id of this ConsortiumDataset.  # noqa: E501


        :return: The user_id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConsortiumDataset.


        :param user_id: The user_id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def model_count(self):
        """Gets the model_count of this ConsortiumDataset.  # noqa: E501


        :return: The model_count of this ConsortiumDataset.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._model_count

    @model_count.setter
    def model_count(self, model_count):
        """Sets the model_count of this ConsortiumDataset.


        :param model_count: The model_count of this ConsortiumDataset.  # noqa: E501
        :type: dict(str, int)
        """
        if model_count is None:
            raise ValueError("Invalid value for `model_count`, must not be `None`")  # noqa: E501

        self._model_count = model_count

    @property
    def source_dataset_id(self):
        """Gets the source_dataset_id of this ConsortiumDataset.  # noqa: E501


        :return: The source_dataset_id of this ConsortiumDataset.  # noqa: E501
        :rtype: int
        """
        return self._source_dataset_id

    @source_dataset_id.setter
    def source_dataset_id(self, source_dataset_id):
        """Sets the source_dataset_id of this ConsortiumDataset.


        :param source_dataset_id: The source_dataset_id of this ConsortiumDataset.  # noqa: E501
        :type: int
        """
        if source_dataset_id is None:
            raise ValueError("Invalid value for `source_dataset_id`, must not be `None`")  # noqa: E501

        self._source_dataset_id = source_dataset_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsortiumDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
