# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DiscussionDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_series_annotation_id': 'int',
        'updated_at': 'datetime',
        'package_id': 'int',
        'id': 'int',
        'created_at': 'datetime',
        'annotation_id': 'int'
    }

    attribute_map = {
        'time_series_annotation_id': 'timeSeries_annotation_id',
        'updated_at': 'updatedAt',
        'package_id': 'package_id',
        'id': 'id',
        'created_at': 'createdAt',
        'annotation_id': 'annotation_id'
    }

    def __init__(self, time_series_annotation_id=None, updated_at=None, package_id=None, id=None, created_at=None, annotation_id=None):  # noqa: E501
        """DiscussionDTO - a model defined in OpenAPI"""  # noqa: E501

        self._time_series_annotation_id = None
        self._updated_at = None
        self._package_id = None
        self._id = None
        self._created_at = None
        self._annotation_id = None
        self.discriminator = None

        if time_series_annotation_id is not None:
            self.time_series_annotation_id = time_series_annotation_id
        self.updated_at = updated_at
        self.package_id = package_id
        self.id = id
        self.created_at = created_at
        if annotation_id is not None:
            self.annotation_id = annotation_id

    @property
    def time_series_annotation_id(self):
        """Gets the time_series_annotation_id of this DiscussionDTO.  # noqa: E501


        :return: The time_series_annotation_id of this DiscussionDTO.  # noqa: E501
        :rtype: int
        """
        return self._time_series_annotation_id

    @time_series_annotation_id.setter
    def time_series_annotation_id(self, time_series_annotation_id):
        """Sets the time_series_annotation_id of this DiscussionDTO.


        :param time_series_annotation_id: The time_series_annotation_id of this DiscussionDTO.  # noqa: E501
        :type: int
        """

        self._time_series_annotation_id = time_series_annotation_id

    @property
    def updated_at(self):
        """Gets the updated_at of this DiscussionDTO.  # noqa: E501


        :return: The updated_at of this DiscussionDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DiscussionDTO.


        :param updated_at: The updated_at of this DiscussionDTO.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def package_id(self):
        """Gets the package_id of this DiscussionDTO.  # noqa: E501


        :return: The package_id of this DiscussionDTO.  # noqa: E501
        :rtype: int
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this DiscussionDTO.


        :param package_id: The package_id of this DiscussionDTO.  # noqa: E501
        :type: int
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")  # noqa: E501

        self._package_id = package_id

    @property
    def id(self):
        """Gets the id of this DiscussionDTO.  # noqa: E501


        :return: The id of this DiscussionDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscussionDTO.


        :param id: The id of this DiscussionDTO.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this DiscussionDTO.  # noqa: E501


        :return: The created_at of this DiscussionDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DiscussionDTO.


        :param created_at: The created_at of this DiscussionDTO.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def annotation_id(self):
        """Gets the annotation_id of this DiscussionDTO.  # noqa: E501


        :return: The annotation_id of this DiscussionDTO.  # noqa: E501
        :rtype: int
        """
        return self._annotation_id

    @annotation_id.setter
    def annotation_id(self, annotation_id):
        """Sets the annotation_id of this DiscussionDTO.


        :param annotation_id: The annotation_id of this DiscussionDTO.  # noqa: E501
        :type: int
        """

        self._annotation_id = annotation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscussionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
