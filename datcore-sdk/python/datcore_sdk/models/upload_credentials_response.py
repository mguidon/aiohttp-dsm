# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadCredentialsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'temp_credentials': 'TemporaryCredentialResponse',
        'encryption_key_id': 'str',
        's3_bucket': 'str',
        's3_key': 'str'
    }

    attribute_map = {
        'temp_credentials': 'tempCredentials',
        'encryption_key_id': 'encryptionKeyId',
        's3_bucket': 's3Bucket',
        's3_key': 's3Key'
    }

    def __init__(self, temp_credentials=None, encryption_key_id=None, s3_bucket=None, s3_key=None):  # noqa: E501
        """UploadCredentialsResponse - a model defined in OpenAPI"""  # noqa: E501

        self._temp_credentials = None
        self._encryption_key_id = None
        self._s3_bucket = None
        self._s3_key = None
        self.discriminator = None

        self.temp_credentials = temp_credentials
        self.encryption_key_id = encryption_key_id
        self.s3_bucket = s3_bucket
        self.s3_key = s3_key

    @property
    def temp_credentials(self):
        """Gets the temp_credentials of this UploadCredentialsResponse.  # noqa: E501


        :return: The temp_credentials of this UploadCredentialsResponse.  # noqa: E501
        :rtype: TemporaryCredentialResponse
        """
        return self._temp_credentials

    @temp_credentials.setter
    def temp_credentials(self, temp_credentials):
        """Sets the temp_credentials of this UploadCredentialsResponse.


        :param temp_credentials: The temp_credentials of this UploadCredentialsResponse.  # noqa: E501
        :type: TemporaryCredentialResponse
        """
        if temp_credentials is None:
            raise ValueError("Invalid value for `temp_credentials`, must not be `None`")  # noqa: E501

        self._temp_credentials = temp_credentials

    @property
    def encryption_key_id(self):
        """Gets the encryption_key_id of this UploadCredentialsResponse.  # noqa: E501


        :return: The encryption_key_id of this UploadCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key_id

    @encryption_key_id.setter
    def encryption_key_id(self, encryption_key_id):
        """Sets the encryption_key_id of this UploadCredentialsResponse.


        :param encryption_key_id: The encryption_key_id of this UploadCredentialsResponse.  # noqa: E501
        :type: str
        """
        if encryption_key_id is None:
            raise ValueError("Invalid value for `encryption_key_id`, must not be `None`")  # noqa: E501

        self._encryption_key_id = encryption_key_id

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this UploadCredentialsResponse.  # noqa: E501


        :return: The s3_bucket of this UploadCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this UploadCredentialsResponse.


        :param s3_bucket: The s3_bucket of this UploadCredentialsResponse.  # noqa: E501
        :type: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")  # noqa: E501

        self._s3_bucket = s3_bucket

    @property
    def s3_key(self):
        """Gets the s3_key of this UploadCredentialsResponse.  # noqa: E501


        :return: The s3_key of this UploadCredentialsResponse.  # noqa: E501
        :rtype: str
        """
        return self._s3_key

    @s3_key.setter
    def s3_key(self, s3_key):
        """Sets the s3_key of this UploadCredentialsResponse.


        :param s3_key: The s3_key of this UploadCredentialsResponse.  # noqa: E501
        :type: str
        """
        if s3_key is None:
            raise ValueError("Invalid value for `s3_key`, must not be `None`")  # noqa: E501

        self._s3_key = s3_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadCredentialsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
