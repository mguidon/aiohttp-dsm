# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PackagePreview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'icon': 'str',
        'group_size': 'int',
        'package_name': 'str',
        'warnings': 'list[str]',
        'files': 'list[S3File]',
        'file_type': 'FileType',
        'package_type': 'PackageType',
        'has_workflow': 'bool',
        'package_subtype': 'str',
        'import_id': 'str'
    }

    attribute_map = {
        'icon': 'icon',
        'group_size': 'groupSize',
        'package_name': 'packageName',
        'warnings': 'warnings',
        'files': 'files',
        'file_type': 'fileType',
        'package_type': 'packageType',
        'has_workflow': 'hasWorkflow',
        'package_subtype': 'packageSubtype',
        'import_id': 'importId'
    }

    def __init__(self, icon=None, group_size=None, package_name=None, warnings=None, files=None, file_type=None, package_type=None, has_workflow=None, package_subtype=None, import_id=None):  # noqa: E501
        """PackagePreview - a model defined in OpenAPI"""  # noqa: E501

        self._icon = None
        self._group_size = None
        self._package_name = None
        self._warnings = None
        self._files = None
        self._file_type = None
        self._package_type = None
        self._has_workflow = None
        self._package_subtype = None
        self._import_id = None
        self.discriminator = None

        self.icon = icon
        self.group_size = group_size
        self.package_name = package_name
        self.warnings = warnings
        self.files = files
        self.file_type = file_type
        self.package_type = package_type
        self.has_workflow = has_workflow
        self.package_subtype = package_subtype
        self.import_id = import_id

    @property
    def icon(self):
        """Gets the icon of this PackagePreview.  # noqa: E501


        :return: The icon of this PackagePreview.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this PackagePreview.


        :param icon: The icon of this PackagePreview.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def group_size(self):
        """Gets the group_size of this PackagePreview.  # noqa: E501


        :return: The group_size of this PackagePreview.  # noqa: E501
        :rtype: int
        """
        return self._group_size

    @group_size.setter
    def group_size(self, group_size):
        """Sets the group_size of this PackagePreview.


        :param group_size: The group_size of this PackagePreview.  # noqa: E501
        :type: int
        """
        if group_size is None:
            raise ValueError("Invalid value for `group_size`, must not be `None`")  # noqa: E501

        self._group_size = group_size

    @property
    def package_name(self):
        """Gets the package_name of this PackagePreview.  # noqa: E501


        :return: The package_name of this PackagePreview.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this PackagePreview.


        :param package_name: The package_name of this PackagePreview.  # noqa: E501
        :type: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501

        self._package_name = package_name

    @property
    def warnings(self):
        """Gets the warnings of this PackagePreview.  # noqa: E501


        :return: The warnings of this PackagePreview.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this PackagePreview.


        :param warnings: The warnings of this PackagePreview.  # noqa: E501
        :type: list[str]
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")  # noqa: E501

        self._warnings = warnings

    @property
    def files(self):
        """Gets the files of this PackagePreview.  # noqa: E501


        :return: The files of this PackagePreview.  # noqa: E501
        :rtype: list[S3File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PackagePreview.


        :param files: The files of this PackagePreview.  # noqa: E501
        :type: list[S3File]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def file_type(self):
        """Gets the file_type of this PackagePreview.  # noqa: E501


        :return: The file_type of this PackagePreview.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this PackagePreview.


        :param file_type: The file_type of this PackagePreview.  # noqa: E501
        :type: FileType
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type

    @property
    def package_type(self):
        """Gets the package_type of this PackagePreview.  # noqa: E501


        :return: The package_type of this PackagePreview.  # noqa: E501
        :rtype: PackageType
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackagePreview.


        :param package_type: The package_type of this PackagePreview.  # noqa: E501
        :type: PackageType
        """
        if package_type is None:
            raise ValueError("Invalid value for `package_type`, must not be `None`")  # noqa: E501

        self._package_type = package_type

    @property
    def has_workflow(self):
        """Gets the has_workflow of this PackagePreview.  # noqa: E501


        :return: The has_workflow of this PackagePreview.  # noqa: E501
        :rtype: bool
        """
        return self._has_workflow

    @has_workflow.setter
    def has_workflow(self, has_workflow):
        """Sets the has_workflow of this PackagePreview.


        :param has_workflow: The has_workflow of this PackagePreview.  # noqa: E501
        :type: bool
        """
        if has_workflow is None:
            raise ValueError("Invalid value for `has_workflow`, must not be `None`")  # noqa: E501

        self._has_workflow = has_workflow

    @property
    def package_subtype(self):
        """Gets the package_subtype of this PackagePreview.  # noqa: E501


        :return: The package_subtype of this PackagePreview.  # noqa: E501
        :rtype: str
        """
        return self._package_subtype

    @package_subtype.setter
    def package_subtype(self, package_subtype):
        """Sets the package_subtype of this PackagePreview.


        :param package_subtype: The package_subtype of this PackagePreview.  # noqa: E501
        :type: str
        """
        if package_subtype is None:
            raise ValueError("Invalid value for `package_subtype`, must not be `None`")  # noqa: E501

        self._package_subtype = package_subtype

    @property
    def import_id(self):
        """Gets the import_id of this PackagePreview.  # noqa: E501


        :return: The import_id of this PackagePreview.  # noqa: E501
        :rtype: str
        """
        return self._import_id

    @import_id.setter
    def import_id(self, import_id):
        """Sets the import_id of this PackagePreview.


        :param import_id: The import_id of this PackagePreview.  # noqa: E501
        :type: str
        """
        if import_id is None:
            raise ValueError("Invalid value for `import_id`, must not be `None`")  # noqa: E501

        self._import_id = import_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagePreview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
