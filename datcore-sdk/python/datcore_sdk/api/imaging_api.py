# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from datcore_sdk.api_client import ApiClient


class ImagingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dimension(self, package_id, dimension_properties, **kwargs):  # noqa: E501
        """creates a new dimension on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dimension(package_id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param DimensionProperties dimension_properties: dimension to create (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dimension_with_http_info(package_id, dimension_properties, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dimension_with_http_info(package_id, dimension_properties, **kwargs)  # noqa: E501
            return data

    def create_dimension_with_http_info(self, package_id, dimension_properties, **kwargs):  # noqa: E501
        """creates a new dimension on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dimension_with_http_info(package_id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param DimensionProperties dimension_properties: dimension to create (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'dimension_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dimension" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `create_dimension`")  # noqa: E501
        # verify the required parameter 'dimension_properties' is set
        if ('dimension_properties' not in local_var_params or
                local_var_params['dimension_properties'] is None):
            raise ValueError("Missing the required parameter `dimension_properties` when calling `create_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dimension_properties' in local_var_params:
            body_params = local_var_params['dimension_properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DimensionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dimensions(self, package_id, dimension_properties, **kwargs):  # noqa: E501
        """creates multiple new dimensions on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dimensions(package_id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param list[DimensionProperties] dimension_properties: dimensions to create (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dimensions_with_http_info(package_id, dimension_properties, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dimensions_with_http_info(package_id, dimension_properties, **kwargs)  # noqa: E501
            return data

    def create_dimensions_with_http_info(self, package_id, dimension_properties, **kwargs):  # noqa: E501
        """creates multiple new dimensions on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dimensions_with_http_info(package_id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param list[DimensionProperties] dimension_properties: dimensions to create (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'dimension_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dimensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `create_dimensions`")  # noqa: E501
        # verify the required parameter 'dimension_properties' is set
        if ('dimension_properties' not in local_var_params or
                local_var_params['dimension_properties'] is None):
            raise ValueError("Missing the required parameter `dimension_properties` when calling `create_dimensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dimension_properties' in local_var_params:
            body_params = local_var_params['dimension_properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DimensionDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dimension(self, package_id, id, **kwargs):  # noqa: E501
        """deletes a dimension from a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dimension(package_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to delete from (required)
        :param int id: the ID of the dimension to delete (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dimension_with_http_info(package_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dimension_with_http_info(package_id, id, **kwargs)  # noqa: E501
            return data

    def delete_dimension_with_http_info(self, package_id, id, **kwargs):  # noqa: E501
        """deletes a dimension from a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dimension_with_http_info(package_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to delete from (required)
        :param int id: the ID of the dimension to delete (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dimension" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `delete_dimension`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dimensions(self, package_id, request_body, **kwargs):  # noqa: E501
        """delete multiple dimensions from a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dimensions(package_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to delete from (required)
        :param list[int] request_body: IDs of dimensions to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dimensions_with_http_info(package_id, request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dimensions_with_http_info(package_id, request_body, **kwargs)  # noqa: E501
            return data

    def delete_dimensions_with_http_info(self, package_id, request_body, **kwargs):  # noqa: E501
        """delete multiple dimensions from a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dimensions_with_http_info(package_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to delete from (required)
        :param list[int] request_body: IDs of dimensions to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dimensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `delete_dimensions`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ValueError("Missing the required parameter `request_body` when calling `delete_dimensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/batch', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dimension(self, id, package_id, **kwargs):  # noqa: E501
        """get dimension for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimension(id, package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the ID of the dimension (required)
        :param str package_id: the ID of the package (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dimension_with_http_info(id, package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dimension_with_http_info(id, package_id, **kwargs)  # noqa: E501
            return data

    def get_dimension_with_http_info(self, id, package_id, **kwargs):  # noqa: E501
        """get dimension for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimension_with_http_info(id, package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the ID of the dimension (required)
        :param str package_id: the ID of the package (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dimension" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_dimension`")  # noqa: E501
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DimensionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dimensions(self, package_id, **kwargs):  # noqa: E501
        """get dimensions for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimensions(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dimensions_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dimensions_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_dimensions_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """get dimensions for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimensions_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dimensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_dimensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DimensionDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dimensions_count(self, package_id, **kwargs):  # noqa: E501
        """return the number of dimensions a package has  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimensions_count(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to get the dimensions count for (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dimensions_count_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dimensions_count_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_dimensions_count_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """return the number of dimensions a package has  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dimensions_count_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package to get the dimensions count for (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dimensions_count" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_dimensions_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dimension(self, package_id, id, dimension_properties, **kwargs):  # noqa: E501
        """updates a dimension on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dimension(package_id, id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param int id: the ID of the dimension to update (required)
        :param DimensionProperties dimension_properties: dimension properties to update (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dimension_with_http_info(package_id, id, dimension_properties, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dimension_with_http_info(package_id, id, dimension_properties, **kwargs)  # noqa: E501
            return data

    def update_dimension_with_http_info(self, package_id, id, dimension_properties, **kwargs):  # noqa: E501
        """updates a dimension on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dimension_with_http_info(package_id, id, dimension_properties, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param int id: the ID of the dimension to update (required)
        :param DimensionProperties dimension_properties: dimension properties to update (required)
        :return: DimensionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'id', 'dimension_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dimension" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `update_dimension`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_dimension`")  # noqa: E501
        # verify the required parameter 'dimension_properties' is set
        if ('dimension_properties' not in local_var_params or
                local_var_params['dimension_properties'] is None):
            raise ValueError("Missing the required parameter `dimension_properties` when calling `update_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dimension_properties' in local_var_params:
            body_params = local_var_params['dimension_properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DimensionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dimensions(self, package_id, dimension_properties_with_id, **kwargs):  # noqa: E501
        """updates multiple dimensions on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dimensions(package_id, dimension_properties_with_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param list[DimensionPropertiesWithId] dimension_properties_with_id: dimensions to update (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dimensions_with_http_info(package_id, dimension_properties_with_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dimensions_with_http_info(package_id, dimension_properties_with_id, **kwargs)  # noqa: E501
            return data

    def update_dimensions_with_http_info(self, package_id, dimension_properties_with_id, **kwargs):  # noqa: E501
        """updates multiple dimensions on a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dimensions_with_http_info(package_id, dimension_properties_with_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the ID of the package (required)
        :param list[DimensionPropertiesWithId] dimension_properties_with_id: dimensions to update (required)
        :return: list[DimensionDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'dimension_properties_with_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dimensions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `update_dimensions`")  # noqa: E501
        # verify the required parameter 'dimension_properties_with_id' is set
        if ('dimension_properties_with_id' not in local_var_params or
                local_var_params['dimension_properties_with_id'] is None):
            raise ValueError("Missing the required parameter `dimension_properties_with_id` when calling `update_dimensions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dimension_properties_with_id' in local_var_params:
            body_params = local_var_params['dimension_properties_with_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/imaging/{packageId}/dimensions/batch', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DimensionDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
