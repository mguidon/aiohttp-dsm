# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from datcore_sdk.api_client import ApiClient


class FilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_package_previews(self, append, preview_package_request, **kwargs):  # noqa: E501
        """returns packages that will be created from a given list of files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_previews(append, preview_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool append: if true, we append the items. if false, we replace (required)
        :param PreviewPackageRequest preview_package_request: files to be uploaded (required)
        :return: PreviewPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_previews_with_http_info(append, preview_package_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_previews_with_http_info(append, preview_package_request, **kwargs)  # noqa: E501
            return data

    def get_package_previews_with_http_info(self, append, preview_package_request, **kwargs):  # noqa: E501
        """returns packages that will be created from a given list of files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_previews_with_http_info(append, preview_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool append: if true, we append the items. if false, we replace (required)
        :param PreviewPackageRequest preview_package_request: files to be uploaded (required)
        :return: PreviewPackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['append', 'preview_package_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_previews" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'append' is set
        if ('append' not in local_var_params or
                local_var_params['append'] is None):
            raise ValueError("Missing the required parameter `append` when calling `get_package_previews`")  # noqa: E501
        # verify the required parameter 'preview_package_request' is set
        if ('preview_package_request' not in local_var_params or
                local_var_params['preview_package_request'] is None):
            raise ValueError("Missing the required parameter `preview_package_request` when calling `get_package_previews`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'append' in local_var_params:
            query_params.append(('append', local_var_params['append']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'preview_package_request' in local_var_params:
            body_params = local_var_params['preview_package_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/files/upload/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreviewPackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_manifest(self, import_id, **kwargs):  # noqa: E501
        """creates a manifest for an uploaded file group, and puts it in s3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_manifest(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: the import ID of the uploaded files (required)
        :param str destination_id: the ID of the package in which to place the files
        :param str dataset_id: the ID of the dataset
        :param bool append: the ID of the package to append this data to
        :param CompleteProxyLinkRequest complete_proxy_link_request: describes the model to link this upload to
        :return: UploadCompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_manifest_with_http_info(import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_manifest_with_http_info(import_id, **kwargs)  # noqa: E501
            return data

    def upload_manifest_with_http_info(self, import_id, **kwargs):  # noqa: E501
        """creates a manifest for an uploaded file group, and puts it in s3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_manifest_with_http_info(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: the import ID of the uploaded files (required)
        :param str destination_id: the ID of the package in which to place the files
        :param str dataset_id: the ID of the dataset
        :param bool append: the ID of the package to append this data to
        :param CompleteProxyLinkRequest complete_proxy_link_request: describes the model to link this upload to
        :return: UploadCompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['import_id', 'destination_id', 'dataset_id', 'append', 'complete_proxy_link_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_manifest" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in local_var_params or
                local_var_params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `upload_manifest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in local_var_params:
            path_params['importId'] = local_var_params['import_id']  # noqa: E501

        query_params = []
        if 'destination_id' in local_var_params:
            query_params.append(('destinationId', local_var_params['destination_id']))  # noqa: E501
        if 'dataset_id' in local_var_params:
            query_params.append(('datasetId', local_var_params['dataset_id']))  # noqa: E501
        if 'append' in local_var_params:
            query_params.append(('append', local_var_params['append']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'complete_proxy_link_request' in local_var_params:
            body_params = local_var_params['complete_proxy_link_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/files/upload/complete/{importId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadCompleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
