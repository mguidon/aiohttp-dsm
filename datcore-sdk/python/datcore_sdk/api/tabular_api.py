# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from datcore_sdk.api_client import ApiClient


class TabularApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def column_stats(self, package_id, column, **kwargs):  # noqa: E501
        """gets the statistics for a numeric column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.column_stats(package_id, column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute statistics (required)
        :return: ColumnStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.column_stats_with_http_info(package_id, column, **kwargs)  # noqa: E501
        else:
            (data) = self.column_stats_with_http_info(package_id, column, **kwargs)  # noqa: E501
            return data

    def column_stats_with_http_info(self, package_id, column, **kwargs):  # noqa: E501
        """gets the statistics for a numeric column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.column_stats_with_http_info(package_id, column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute statistics (required)
        :return: ColumnStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'column']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method column_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `column_stats`")  # noqa: E501
        # verify the required parameter 'column' is set
        if ('column' not in local_var_params or
                local_var_params['column'] is None):
            raise ValueError("Missing the required parameter `column` when calling `column_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'column' in local_var_params:
            path_params['column'] = local_var_params['column']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/{column}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ColumnStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def count(self, package_id, **kwargs):  # noqa: E501
        """gets the number of rows in a table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.count_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def count_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """gets the number of rows in a table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distinct_count(self, package_id, column, **kwargs):  # noqa: E501
        """gets the number of distinct values in a column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distinct_count(package_id, column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute the distinct values (required)
        :return: DistinctResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distinct_count_with_http_info(package_id, column, **kwargs)  # noqa: E501
        else:
            (data) = self.distinct_count_with_http_info(package_id, column, **kwargs)  # noqa: E501
            return data

    def distinct_count_with_http_info(self, package_id, column, **kwargs):  # noqa: E501
        """gets the number of distinct values in a column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distinct_count_with_http_info(package_id, column, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute the distinct values (required)
        :return: DistinctResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'column']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distinct_count" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `distinct_count`")  # noqa: E501
        # verify the required parameter 'column' is set
        if ('column' not in local_var_params or
                local_var_params['column'] is None):
            raise ValueError("Missing the required parameter `column` when calling `distinct_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'column' in local_var_params:
            path_params['column'] = local_var_params['column']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/{column}/distinct/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistinctResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distinct_values(self, package_id, column, limit, **kwargs):  # noqa: E501
        """gets the distinct values and their counts for a column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distinct_values(package_id, column, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute the distinct values (required)
        :param str limit: the number of distinct values to include (required)
        :return: DistinctValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distinct_values_with_http_info(package_id, column, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.distinct_values_with_http_info(package_id, column, limit, **kwargs)  # noqa: E501
            return data

    def distinct_values_with_http_info(self, package_id, column, limit, **kwargs):  # noqa: E501
        """gets the distinct values and their counts for a column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distinct_values_with_http_info(package_id, column, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param str column: the name of the table column for which we will compute the distinct values (required)
        :param str limit: the number of distinct values to include (required)
        :return: DistinctValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'column', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distinct_values" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `distinct_values`")  # noqa: E501
        # verify the required parameter 'column' is set
        if ('column' not in local_var_params or
                local_var_params['column'] is None):
            raise ValueError("Missing the required parameter `column` when calling `distinct_values`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in local_var_params or
                local_var_params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `distinct_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'column' in local_var_params:
            path_params['column'] = local_var_params['column']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/{column}/distinct/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistinctValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_schema(self, package_id, **kwargs):  # noqa: E501
        """gets the schema for a tabular data package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_schema(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :return: GraphNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_schema_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_schema_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_table_schema_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """gets the schema for a tabular data package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_schema_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :return: GraphNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_schema" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_table_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GraphNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tabular_data(self, package_id, **kwargs):  # noqa: E501
        """gets the tabular data for a Tabular package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tabular_data(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param int limit: limits the number of rows to return (default=1000, max=10000)
        :param int offset: starting row to get data onwards from (default=0)
        :param str order_by: column to order the results by
        :param str order_direction: direction to order by (from values {ASC,DESC}) (default=ASC)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tabular_data_with_http_info(package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tabular_data_with_http_info(package_id, **kwargs)  # noqa: E501
            return data

    def get_tabular_data_with_http_info(self, package_id, **kwargs):  # noqa: E501
        """gets the tabular data for a Tabular package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tabular_data_with_http_info(package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param int limit: limits the number of rows to return (default=1000, max=10000)
        :param int offset: starting row to get data onwards from (default=0)
        :param str order_by: column to order the results by
        :param str order_direction: direction to order by (from values {ASC,DESC}) (default=ASC)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'limit', 'offset', 'order_by', 'order_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tabular_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_tabular_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'order_by' in local_var_params:
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501
        if 'order_direction' in local_var_params:
            query_params.append(('orderDirection', local_var_params['order_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Table',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_tabular_data(self, package_id, insert_tabular_data_request, **kwargs):  # noqa: E501
        """inserts multiple rows of data into the contents of a tabular package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_tabular_data(package_id, insert_tabular_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param InsertTabularDataRequest insert_tabular_data_request: rows of tabular data to be inserted (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_tabular_data_with_http_info(package_id, insert_tabular_data_request, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_tabular_data_with_http_info(package_id, insert_tabular_data_request, **kwargs)  # noqa: E501
            return data

    def insert_tabular_data_with_http_info(self, package_id, insert_tabular_data_request, **kwargs):  # noqa: E501
        """inserts multiple rows of data into the contents of a tabular package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_tabular_data_with_http_info(package_id, insert_tabular_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param InsertTabularDataRequest insert_tabular_data_request: rows of tabular data to be inserted (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'insert_tabular_data_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_tabular_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `insert_tabular_data`")  # noqa: E501
        # verify the required parameter 'insert_tabular_data_request' is set
        if ('insert_tabular_data_request' not in local_var_params or
                local_var_params['insert_tabular_data_request'] is None):
            raise ValueError("Missing the required parameter `insert_tabular_data_request` when calling `insert_tabular_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'insert_tabular_data_request' in local_var_params:
            body_params = local_var_params['insert_tabular_data_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/insert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Table',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def store_schema(self, package_id, add_schema_request, **kwargs):  # noqa: E501
        """stores a table schema for a tabular data package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_schema(package_id, add_schema_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param AddSchemaRequest add_schema_request: the list of columns names, their types, and other properties that describe the table's schema (required)
        :return: TableSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.store_schema_with_http_info(package_id, add_schema_request, **kwargs)  # noqa: E501
        else:
            (data) = self.store_schema_with_http_info(package_id, add_schema_request, **kwargs)  # noqa: E501
            return data

    def store_schema_with_http_info(self, package_id, add_schema_request, **kwargs):  # noqa: E501
        """stores a table schema for a tabular data package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.store_schema_with_http_info(package_id, add_schema_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: package id (required)
        :param AddSchemaRequest add_schema_request: the list of columns names, their types, and other properties that describe the table's schema (required)
        :return: TableSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'add_schema_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method store_schema" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `store_schema`")  # noqa: E501
        # verify the required parameter 'add_schema_request' is set
        if ('add_schema_request' not in local_var_params or
                local_var_params['add_schema_request'] is None):
            raise ValueError("Missing the required parameter `add_schema_request` when calling `store_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_schema_request' in local_var_params:
            body_params = local_var_params['add_schema_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/tabular/{packageId}/schema', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
