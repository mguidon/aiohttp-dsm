# coding: utf-8

"""
    Blackfynn Swagger

    Swagger documentation for the Blackfynn api  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from datcore_sdk.api_client import ApiClient


class PackagesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_package(self, create_package_request, **kwargs):  # noqa: E501
        """creates a new package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_package(create_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePackageRequest create_package_request: package to create (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_package_with_http_info(create_package_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_package_with_http_info(create_package_request, **kwargs)  # noqa: E501
            return data

    def create_package_with_http_info(self, create_package_request, **kwargs):  # noqa: E501
        """creates a new package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_package_with_http_info(create_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePackageRequest create_package_request: package to create (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_package_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_package_request' is set
        if ('create_package_request' not in local_var_params or
                local_var_params['create_package_request'] is None):
            raise ValueError("Missing the required parameter `create_package_request` when calling `create_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_package_request' in local_var_params:
            body_params = local_var_params['create_package_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_annotations(self, id, **kwargs):  # noqa: E501
        """get annotations for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the id of the annotated package (required)
        :return: GetAnnotationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_annotations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_annotations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_annotations_with_http_info(self, id, **kwargs):  # noqa: E501
        """get annotations for package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: the id of the annotated package (required)
        :return: GetAnnotationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_annotations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_annotations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}/annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAnnotationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file(self, package_id, id, **kwargs):  # noqa: E501
        """returns a presigned s3 url for downloading a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file(package_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the id of the package (required)
        :param str id: the id of the file (required)
        :return: DownloadItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_file_with_http_info(package_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_with_http_info(package_id, id, **kwargs)  # noqa: E501
            return data

    def get_file_with_http_info(self, package_id, id, **kwargs):  # noqa: E501
        """returns a presigned s3 url for downloading a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_with_http_info(package_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str package_id: the id of the package (required)
        :param str id: the id of the file (required)
        :return: DownloadItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['package_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in local_var_params or
                local_var_params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `get_file`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'package_id' in local_var_params:
            path_params['packageId'] = local_var_params['package_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{packageId}/files/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package(self, id, include, include_ancestors, **kwargs):  # noqa: E501
        """gets a package and optionally objects that are associated with it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package(id, include, include_ancestors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param str include: a csv of object types i.e. sources,files,view (required)
        :param bool include_ancestors: whether or not to include ancestors (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_with_http_info(id, include, include_ancestors, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_with_http_info(id, include, include_ancestors, **kwargs)  # noqa: E501
            return data

    def get_package_with_http_info(self, id, include, include_ancestors, **kwargs):  # noqa: E501
        """gets a package and optionally objects that are associated with it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_with_http_info(id, include, include_ancestors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param str include: a csv of object types i.e. sources,files,view (required)
        :param bool include_ancestors: whether or not to include ancestors (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'include', 'include_ancestors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_package`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in local_var_params or
                local_var_params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `get_package`")  # noqa: E501
        # verify the required parameter 'include_ancestors' is set
        if ('include_ancestors' not in local_var_params or
                local_var_params['include_ancestors'] is None):
            raise ValueError("Missing the required parameter `include_ancestors` when calling `get_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'include' in local_var_params:
            query_params.append(('include', local_var_params['include']))  # noqa: E501
        if 'include_ancestors' in local_var_params:
            query_params.append(('includeAncestors', local_var_params['include_ancestors']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_files(self, id, **kwargs):  # noqa: E501
        """Gets all files of a package of the given id, if no files exist, returns sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_files_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_files_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_package_files_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets all files of a package of the given id, if no files exist, returns sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_files" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_package_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_sources(self, id, **kwargs):  # noqa: E501
        """gets all sources of a package of the given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_sources(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_sources_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_sources_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_package_sources_with_http_info(self, id, **kwargs):  # noqa: E501
        """gets all sources of a package of the given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_sources_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_sources" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_package_sources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_package_view(self, id, **kwargs):  # noqa: E501
        """Gets view objects for a package of the given id, if no view objects exist, returns files, if no files exist, return sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_view(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_package_view_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_package_view_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_package_view_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets view objects for a package of the given id, if no view objects exist, returns files, if no files exist, return sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_package_view_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :return: list[FileDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_package_view" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_package_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}/view', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_package(self, id, update_package_request, **kwargs):  # noqa: E501
        """updates a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package(id, update_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param UpdatePackageRequest update_package_request: package node values to update (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_package_with_http_info(id, update_package_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_package_with_http_info(id, update_package_request, **kwargs)  # noqa: E501
            return data

    def update_package_with_http_info(self, id, update_package_request, **kwargs):  # noqa: E501
        """updates a package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_with_http_info(id, update_package_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param UpdatePackageRequest update_package_request: package node values to update (required)
        :return: PackageDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'update_package_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_package" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_package`")  # noqa: E501
        # verify the required parameter 'update_package_request' is set
        if ('update_package_request' not in local_var_params or
                local_var_params['update_package_request'] is None):
            raise ValueError("Missing the required parameter `update_package_request` when calling `update_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_package_request' in local_var_params:
            body_params = local_var_params['update_package_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_package_objects(self, id, object_type, append, package_object_request, **kwargs):  # noqa: E501
        """updates the sources,files, or view objects for a package of the given id with the given graph nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_objects(id, object_type, append, package_object_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param str object_type: type of objects to create (sources, files, or view) (required)
        :param bool append: if true, we append the items. if false, we replace (required)
        :param list[PackageObjectRequest] package_object_request: objects to create (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_package_objects_with_http_info(id, object_type, append, package_object_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_package_objects_with_http_info(id, object_type, append, package_object_request, **kwargs)  # noqa: E501
            return data

    def update_package_objects_with_http_info(self, id, object_type, append, package_object_request, **kwargs):  # noqa: E501
        """updates the sources,files, or view objects for a package of the given id with the given graph nodes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_package_objects_with_http_info(id, object_type, append, package_object_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: package id (required)
        :param str object_type: type of objects to create (sources, files, or view) (required)
        :param bool append: if true, we append the items. if false, we replace (required)
        :param list[PackageObjectRequest] package_object_request: objects to create (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'object_type', 'append', 'package_object_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_package_objects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_package_objects`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in local_var_params or
                local_var_params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `update_package_objects`")  # noqa: E501
        # verify the required parameter 'append' is set
        if ('append' not in local_var_params or
                local_var_params['append'] is None):
            raise ValueError("Missing the required parameter `append` when calling `update_package_objects`")  # noqa: E501
        # verify the required parameter 'package_object_request' is set
        if ('package_object_request' not in local_var_params or
                local_var_params['package_object_request'] is None):
            raise ValueError("Missing the required parameter `package_object_request` when calling `update_package_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'object_type' in local_var_params:
            path_params['objectType'] = local_var_params['object_type']  # noqa: E501

        query_params = []
        if 'append' in local_var_params:
            query_params.append(('append', local_var_params['append']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'package_object_request' in local_var_params:
            body_params = local_var_params['package_object_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/packages/{id}/{objectType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
